---
apiVersion: optimize.stormforge.io/v1beta2
kind: Experiment
metadata:
  name: kafka-001
  labels:
    stormforge.io/application: 'kafka'
    stormforge.io/scenario: 'perftest'

spec:
  optimization:
  - name: experimentBudget
    value: "80"

  parameters:
  - name: cpu_m
    baseline: 500
    min: 100
    max: 2000
  - name: heap_mb
    baseline: 1024
    min: 512
    max: 8192
  - name: partitions
    baseline: 30
    min: 1
    max: 3000
  - name: replicas
    baseline: 1
    min: 1
    max: 3

  metrics:
  # Metrics to optimize for
  - name: consumer-msgs-per-second
    type: prometheus
    query: 'scalar(avg_over_time(consumer_msgs_per_second{job="trialRun", instance="{{ .Trial.Name }}"}[10m]))'
  - name: producer-msgs-per-second
    type: prometheus
    query: 'scalar(avg_over_time(producer_msgs_per_second{job="trialRun", instance="{{ .Trial.Name }}"}[10m]))'
  - name: producer-p95-ms-latency
    minimize: true
    type: prometheus
    query: 'scalar(avg_over_time(producer_p95_ms_latency{job="trialRun", instance="{{ .Trial.Name }}"}[10m]))'
  - name: cost_heuristic
    minimize: true
    type: kubernetes
    query: '{{ resourceRequests .Target "cpu=0.017,memory=0.000000000003" }}'
    target:
      apiVersion: v1
      kind: PodList
      matchLabels:
        app.kubernetes.io/name: kafka

  # Extra metrics - track, but not to optimize directly
  - name: producer-avg-ms-latency
    type: prometheus
    query: 'scalar(avg_over_time(producer_avg_ms_latency{job="trialRun", instance="{{ .Trial.Name }}"}[10m]))'
    optimize: false
  - name: consumer-MBs-per-second
    type: prometheus
    query: 'scalar(avg_over_time(consumer_mbs_per_second{job="trialRun", instance="{{ .Trial.Name }}"}[10m]))'
    optimize: false

  patches:
  - targetRef:
      apiVersion: apps/v1
      kind: StatefulSet
      name: kafka
    patch: |
      spec:
        template:
          spec:
            containers:
            - name: kafka
              resources:
                requests:
                  memory: {{ .Values.heap_mb }}Mi
                  cpu: {{ .Values.cpu_m }}m
                limits:
                  cpu: {{ .Values.cpu_m }}m
              env:
              - name: KAFKA_HEAP_OPTS
                value: '-Xmx{{ .Values.heap_mb }}m -Xms{{ .Values.heap_mb }}m'

  trialTemplate:
    spec:
      readinessGates:
      - name: kafka
        apiVersion: apps/v1
        kind: StatefulSet
        periodSeconds: 5
        failureThreshold: 84
        conditionTypes:
        - stormforge.io/app-ready

      setupServiceAccountName: optimize-pro-setuptask-sa
      setupTasks:
      - name: monitoring
        args:
        - prometheus
        - $(MODE)

      jobTemplate:
        spec:
          parallelism: 2
          completions: 2
          template:
            spec:
              restartPolicy: Never
              volumes:
              - name: work-dir
                emptyDir: {}
              initContainers:
              - name: topic-delete
                image: docker.io/bitnami/kafka:3.3.1
                resources:
                  requests:
                    memory: "100Mi"
                    cpu: "100m"
                command:
                - '/bin/sh'
                - '-c'
                - |
                  BROKERS='kafka-0.kafka-svc:9092,kafka-1.kafka-svc:9092,kafka-2.kafka-svc:9092'
                  for old_topic in $(kafka-topics.sh --list --bootstrap-server "$BROKERS" \
                    | grep test | grep -v "test-${PARTITIONS}p-${REPLICAS}r-${HEAP_MB}m")
                  do
                    kafka-topics.sh --delete --if-exists \
                      --bootstrap-server "$BROKERS" \
                      --topic "$old_topic"
                  done
                  exit 0
              - name: topic-create
                image: docker.io/bitnami/kafka:3.3.1
                resources:
                  requests:
                    memory: "100Mi"
                    cpu: "100m"
                command:
                - '/bin/sh'
                - '-c'
                - |
                  kafka-topics.sh --create --if-not-exists \
                    --bootstrap-server kafka-0.kafka-svc:9092,kafka-1.kafka-svc:9092,kafka-2.kafka-svc:9092 \
                    --topic "test-${PARTITIONS}p-${REPLICAS}r-${HEAP_MB}m" \
                    --partitions $PARTITIONS \
                    --replication-factor $REPLICAS \
                    --config retention.ms=300000
                  exit 0
              containers:
              - name: consumer
                image: docker.io/bitnami/kafka:3.3.1
                resources:
                  requests:
                    memory: "1Gi"
                    cpu: "2"
                  limits:
                    cpu: "2"
                volumeMounts:
                - mountPath: /work-dir
                  name: work-dir
                command:
                - '/bin/sh'
                - '-c'
                - |
                  set -e
                  kafka-consumer-perf-test.sh \
                    --bootstrap-server kafka-0.kafka-svc:9092,kafka-1.kafka-svc:9092,kafka-2.kafka-svc:9092 \
                    --topic "test-${PARTITIONS}p-${REPLICAS}r-${HEAP_MB}m" \
                    --messages 1000000 \
                    --timeout 300000 \
                  | tee /work-dir/consumer.out
                  curl --data-binary @- "$PUSHGATEWAY_URL" <<EOF
                    consumer_mbs_per_second $(tail -1 /work-dir/consumer.out | awk -F ', ' '{print $4}')
                    consumer_msgs_per_second $(tail -1 /work-dir/consumer.out  | awk -F ', ' '{print $6}')
                  EOF
              - name: producer
                image: docker.io/bitnami/kafka:3.3.1
                resources:
                  requests:
                    memory: "500Mi"
                    cpu: "2"
                  limits:
                    cpu: "2"
                env:
                - name: PARTITIONS
                  value: "30"
                - name: REPLICAS
                  value: "3"
                volumeMounts:
                - mountPath: /work-dir
                  name: work-dir
                command:
                - '/bin/sh'
                - '-c'
                - |
                  set -e
                  kafka-producer-perf-test.sh \
                    --topic "test-${PARTITIONS}p-${REPLICAS}r-${HEAP_MB}m" \
                    --num-records 1000000 \
                    --throughput -1 \
                    --record-size 1000 \
                    --producer-props \
                        bootstrap.servers=kafka-0.kafka-svc:9092,kafka-1.kafka-svc:9092,kafka-2.kafka-svc:9092 \
                        batch.size=1000 \
                        acks=1 \
                        linger.ms=100000 \
                        buffer.memory=268435456 \
                        compression.type=none \
                        request.timeout.ms=300000 \
                  | tee /work-dir/producer.out
                  curl --data-binary @- "$PUSHGATEWAY_URL" <<EOF
                    producer_msgs_per_second $(tail -1 /work-dir/producer.out | cut -f 4 -d ' ')
                    producer_avg_ms_latency $(tail -1 /work-dir/producer.out  | cut -f 8 -d ' ')
                    producer_p95_ms_latency $(tail -1 /work-dir/producer.out  | cut -f 19 -d ' ')
                  EOF
